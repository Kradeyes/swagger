openapi: 3.0.3
info:
  title: Swagger OpenAPI 3.0
  description: тест
  version: 1.0.0
servers:
  - url: http://127.0.0.1:38096/
    description: << Т Е С Т >>
tags:
  - name: Проверки СПК
    description: Комплексный сервис проверок
  - name: Справочники
    description: Справочники, используемые в приложении
  - name: Данные ЮЛ
    description: Заполнение форм приложения по ЮЛ
paths:
  
  # ***********ПРОВЕРКИ СПК***************  
  
  /inspections:
    post:
      tags:
        - Проверки СПК
      summary: Получение результатов проверок
      description: "Проверки проводятся как на форме, так и в CDI(чёрные списки)"
      operationId: postSPKInspections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationsReq'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationsResp'
        '404':
          description: Pet not found
        '422':
          description: Validation exception
    # ***********ПОЛУЧЕНИЕ ДАННЫХ ПО ЮЛ***************       
  /getULdata:
    get:
      tags:
        - Данные ЮЛ
      summary: Получение данных ЮЛ, для заполнения анкеты
      description: ""
      operationId: postSPKULDATA
      parameters:
        - name: inn
          required: true
          in: query
          description: ИНН организации
          schema:
            type: string
        - name: kpp
          required: false
          in: query
          description: КПП организации
          schema:
            type: string

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
              examples:
                json:
                  value: '{
                      "mrf":[{"id": 6, "name": "МРФ Дальний Восток"}]
                     ,"citizens":[{"id": 744, "name": "РОССИЯ"}, {"id": 755, "name": "АЛБАНИЯ"}, {"id": 749, "name": "АНТАРКТИДА"}]
                     ,"rf": [{"id":1,"name":"Краснодарский край","mrf_id":2}]
                     ,"okved": [{"id": "01","name": "01-Растениеводство и животноводство, охота и предоставление соответствующих услуг в этих областях\n"},{"id": "01.1","name": "01.1-Выращивание однолетних культур\n"}]
                     ,"org": [{"id": "SUPERVISORY_BOARD","name": "Совет директоров (наблюдательный совет)"},  {"id": "COMMON","name": "Общее собрание учредителей(участников/акционеров/членов)"},{"id": "DIRECTOR","name": "Директор"},{"id": "OTHER","name": "Иное"},{"id": "MUNICIPAL_INSTITUTION_LEADER","name": "Руководитель муниципального учреждения"}]
                    }'
        
        # ***********СПРАВОЧНИКИ***************

  /getDictionaries:

    get:
      tags:
        - Справочники
      summary: Получение справочников
      description: extrep_mdm.spk_get_rf_mrf_citizens
      operationId: getSpkDictionary
      responses:
        '200':
          description: Successful operation
          content:
           application/json:
              schema:
                type: object
              examples:
                json:
                  value: '{
                      "mrf":[{"id": 6, "name": "МРФ Дальний Восток"}]
                     ,"citizens":[{"id": 744, "name": "РОССИЯ"}, {"id": 755, "name": "АЛБАНИЯ"}, {"id": 749, "name": "АНТАРКТИДА"}]
                     ,"rf": [{"id":1,"name":"Краснодарский край","mrf_id":2}]
                     ,"okved": [{"id": "01","name": "01-Растениеводство и животноводство, охота и предоставление соответствующих услуг в этих областях\n"},{"id": "01.1","name": "01.1-Выращивание однолетних культур\n"}]
                     ,"org": [{"id": "SUPERVISORY_BOARD","name": "Совет директоров (наблюдательный совет)"},  {"id": "COMMON","name": "Общее собрание учредителей(участников/акционеров/членов)"},{"id": "DIRECTOR","name": "Директор"},{"id": "OTHER","name": "Иное"},{"id": "MUNICIPAL_INSTITUTION_LEADER","name": "Руководитель муниципального учреждения"}]
                    }'
components:
  schemas:

    # *********************************************
    # *********************************************
    VerificationsResp:
      $ref: '#/components/schemas/AllInspections'

    
    VerificationsReq:
      type: object
      properties:
        inspections:
          type: array
          items:
            $ref: '#/components/schemas/include'
        prev_inspections:
          $ref: '#/components/schemas/pInspections'
    pInspections:
      type: object
      properties:
        FATF:
          $ref: '#/components/schemas/inpectionResult'
        BB:
          $ref: '#/components/schemas/inpectionResult'
        ZAPROS_FM_ST7:
          $ref: '#/components/schemas/inpectionResult'
        PODOZR:
          $ref: '#/components/schemas/inpectionResult'
        RISK_OKVED:
          $ref: '#/components/schemas/inpectionResult'
        NOT_LIC:
          $ref: '#/components/schemas/inpectionResult'

    AllInspections:
      type: object
      properties:
        FATF:
          $ref: '#/components/schemas/inpectionResult'
        BB:
          $ref: '#/components/schemas/inpectionResult'
        ZAPROS_FM_ST7:
          $ref: '#/components/schemas/inpectionResult'
        PODOZR:
          $ref: '#/components/schemas/inpectionResult'
        RISK_OKVED:
          $ref: '#/components/schemas/inpectionResult'
        NOT_LIC:
          $ref: '#/components/schemas/inpectionResult'
        TERROR:
          $ref: '#/components/schemas/inpectionResult'
        TERROR_ADDR:
          $ref: '#/components/schemas/inpectionResult'
        PDL:
          $ref: '#/components/schemas/inpectionResult'
        MVK:
          $ref: '#/components/schemas/inpectionResult'
        FROMU:
          $ref: '#/components/schemas/inpectionResult'
        CLOSED_IPDL:
          $ref: '#/components/schemas/inpectionResult'
        NOT_IN_ADDRESS:
          $ref: '#/components/schemas/inpectionResult'
        RKN:
          $ref: '#/components/schemas/inpectionResult'
        SUMMARY:
          type: integer
          format: int32

    
    inpectionResult:
      type: object
      properties:
        goal:
          type: integer
          format: int32
        include:
          type: array
          items:
            $ref: '#/components/schemas/include'

    include:
      type: object
      properties:
        org_type:
          type: string
          enum:
            - LEGAL
            - PHYSICAL
        inn:
          type: string
        name:
          type: string
        bithDate:
          type: string
          format: date
        type:
          type: string
          enum: [ "Клиент", "Представитель клиента", "Выгодоприобретатель", "Бенефициарный владелец", "Директор" ]
          x-enum-varnames: [ CLIENT, CLIENT_REPRESENTATIVE,
                             BENEFICIARY, BENEFICIAL_OWNER,
                             DIRECTOR ]
        address:
          type: string
        site:
          type: string

          # *********************************************
          # *********************************************

    Dictionary:
      type: object
      properties:
        mrf:
          type: array
          items:
            $ref: '#/components/schemas/mrfs'
        citizen:
          type: array
          items:
            $ref: '#/components/schemas/citizens'
        rf:
          type: array
          items:
            $ref: '#/components/schemas/rfs'
        okved:
          type: array
          items:
            $ref: '#/components/schemas/okveds'
    mrfs:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: ЮГ
    citizens:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Краснодарский край
    rfs:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Краснодарский край
        mrf_id:
          type: integer
          format: int32
          example: 2
    okveds:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Выращивание травы